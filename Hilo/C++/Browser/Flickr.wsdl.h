
// File generated by Wsutil Compiler version 1.0092 
// This file defines C/C++ functions, callbacks, types that correspond to operations,
// and types specified in WSDL and XSD files processed by WsUtil compiler. The generated 
// type definitions, function and callback declarations can be used with various 
// Web Services APIs either in applications that send and receive requests to and 
// from a running web service, or in the implementation of web services, or in both. 
//
// If Wsutil has generated this file from a WSDL file, the file may contain up to three 
// sets of C/C++ definitions. The first set consists of function declarations that can be 
// used in calling operations on a running web service from client applications. 
// The second set consists of callback declarations that can be used in the 
// implementation of web services.  
// The third set contains definitions C/C++ structures that are used for serialization of 
// C/C++ types to schema types defined in the WSDL file.
//
// The set of function declarations for web services clients may contain the 
// following declaration: 
//
//    HRESULT WINAPI DefaultBinding_ICalculator_Add(
//       __in WS_SERVICE_PROXY* _serviceProxy,
//       __in int a, 
//       __in int b, 
//       __out int* result, 
//       __in WS_HEAP* _heap,
//       __in_opt WS_CALL_PROPERTY* _callProperties,
//       __in const ULONG _callPropertyCount,
//       __in_opt const WS_ASYNC_CONTEXT*_asyncContext,
//       __in_opt WS_ERROR* _error);
//
// This function can be called from an application code to request ICalculator web 
// service to perform operation Add using two integers a and b as input data.
// Once the web service processes this request and sends the result back,
// the result is returned to the caller of this function in the "result" parameter.
// A WS_SERVICE_PROXY must be created using WsCreateServiceProxy() function
// before this proxy function can be invoked.
//
// The set of callbacks for implementation of web services may contain the following 
// definition of a callback: 
//
//    typedef HRESULT (CALLBACK* DefaultBinding_ICalculator_AddCallback) (
//       __in const WS_OPERATION_CONTEXT* _context,
//       __in int a, 
//       __in int b, 
//       __out int* result, 
//       __in const WS_ASYNC_CONTEXT* _asyncContext,
//       __in WS_ERROR* _error); 
//
//    typedef struct DefaultBinding_ICalculatorFunctionTable 
//    {
//         DefaultBinding_ICalculator_AddCallback DefaultBinding_ICalculator_Add;
//    } DefaultBinding_ICalculatorFunctionTable;
//
// This definition can be used to implement a function that defines the Add operation 
// as a part of an ICalculator web service. Once this callback is implemented and 
// the web service is deployed and running, if a client applications attempts to 
// execute the operation Add, the implementation of this callback is called and 
// it receives two integers a and b as input data and it returns a third integer 
// that is the result of the operation. A WS_SERVICE_ENDPOINT must be filled out, 
// and its contract field set to instance of such a function table.  
// WsCreateServiceHost may then be used to register the endpoint as a service.
// 
// The set with definitions of C/C++ structures may contain a definition of the following 
// structure:
//    typedef struct ContactInfo 
//    {
//			WCHAR*  name;
//			WCHAR*  email;
//			__int64 contactID;
//	  } ContactInfo;
//
// This structure corresponds to the following complex type defined in the WSDL file:
//    <s:complexType name="ContactInfo">
//      <s:sequence>
//        <s:element minOccurs="1" maxOccurs="1" name="name" type="s:string" />
//        <s:element minOccurs="1" maxOccurs="1" name="email" type="s:string" />
//        <s:element minOccurs="1" maxOccurs="1" name="contactID" type="s:long" />
//      </s:sequence>
//    </s:complexType>
//
// For more information about content of this file, please see the documentation for
// Wsutil compiler.
// If Wsutil has generated this file from an XSD file, the file contains definition of 
// C/C++ structures types that correspond to types defined in the XSD file. 
// For example, if the following XSD complexType is defined in the XSD file
//
//      <xsd:complexType name="AddRequest">
//          <xsd:sequence>
//              <xsd:element minOccurs="0" name="a" type="xsd:int" />
//              <xsd:element minOccurs="0" name="b" type="xsd:int" />
//          </xsd:sequence>
//      </xsd:complexType>
// 
// this file contains the following definitions of the structure 
//      // AddRequest (xsd:complexType)
//      // <AddRequest xmlns='http://tempuri.org'>
//      // WS_STRUCT_DESCRIPTION* = &calculator_xsd.globalTypes.AddRequest
//      struct AddRequest
//      {
//          int a;
//          int b;
//      };
//
// For more information on how to use the C/C++ types generated in this file to read or write elements of XML documents that conform to 
// this XSD, please see the documentation for 
// WsReadType() and WsWriteType() functions.
// 
// If Wsutil generates this file from a WSDL file and policy processing is enabled using
// policy switch, the file may contain declaration of functions that can be used 
// for creating a proxy to a web service or an endpoint of a web service. 
// For example, the file may contain declaration of the following function:
//
//    HRESULT DefaultBinding_ICalculator_CreateServiceProxy(
//    __in WS_HTTP_SSL_BINDING_TEMPLATE* templateValue,
//    __in_ecount_opt(proxyPropertyCount) const WS_PROXY_PROPERTY* proxyProperties,
//    __in const ULONG proxyPropertyCount,
//    __deref_out_opt WS_SERVICE_PROXY** proxy,
//    __in_opt WS_ERROR* error);
//
// This function can be called from application code to create a service
// proxy object. A service proxy must be created before any request can be sent 
// to the web service.
//
// Also, the file may contain declaration of the following function :
//
//    HRESULT DefaultBinding_ICalculator_CreateServiceEndpoint(
//    __in WS_HTTP_SSL_BINDING_TEMPLATE* templateValue,
//    __in_opt WS_STRING address,
//    __in_opt struct DefaultBinding_ICalculatorFunctionTable* functionTable,
//    __in_opt WS_SERVICE_SECURITY_CALLBACK authorizationCallback,
//    __in_ecount_opt(endpointPropertyCount) WS_SERVICE_ENDPOINT_PROPERTY* endpointProperties,
//    __in const ULONG endpointPropertyCount,
//    __in WS_HEAP* heap,
//    __deref_out_opt WS_SERVICE_ENDPOINT** serviceEndpoint,
//    __in_opt WS_ERROR* error);
//
// This function can be used to create a Service Host object, which has to be 
// created before a web services starts receiving requests from its clients.
//
// For more information about content of this file, please see the documentation for
// Wsutil compiler.
#if _MSC_VER > 1000 
#pragma once
#endif

#ifdef __cplusplus
extern "C" {
#endif

// The following client functions were generated:

//     FlickrFrobRequestPortBinding_flickr_auth_getFrob
//     FlickrTokenRequestPortBinding_flickr_auth_getToken

// The following server function tables were generated:

//     struct FlickrFrobRequestPortBindingFunctionTable
//     struct FlickrTokenRequestPortBindingFunctionTable

// The following types were generated:

//     struct _FlickrRequest;

// the following policy helpers were generated:

//  FlickrFrobRequestPortBinding_CreateServiceProxy;
//  FlickrFrobRequestPortBinding_CreateServiceEndpoint;
//  FlickrTokenRequestPortBinding_CreateServiceProxy;
//  FlickrTokenRequestPortBinding_CreateServiceEndpoint;

// The following header files must be included in this order before this one

// #include <WebServices.h>

////////////////////////////////////////////////
// C structure definitions for generated types
////////////////////////////////////////////////

// typeDescription: n/a
typedef struct _FlickrRequest 
{
    WCHAR* method;
    WCHAR* api_key;
    WCHAR* api_sig;
    WCHAR* frob; // optional
} _FlickrRequest;

////////////////////////////////////////////////
// Policy helper routines
////////////////////////////////////////////////

//  WS_CHANNEL_PROPERTY_ENCODING = WS_ENCODING_XML_UTF8,
//  WS_CHANNEL_PROPERTY_ADDRESSING_VERSION = WS_ADDRESSING_VERSION_TRANSPORT,
//  WS_ENVELOPE_VERSION = WS_ENVELOPE_VERSION_SOAP_1_1,
// client channel type: WS_CHANNEL_TYPE_REQUEST, service endpoint channel type: WS_CHANNEL_TYPE_REPLY

HRESULT FlickrFrobRequestPortBinding_CreateServiceProxy(
    __in_opt WS_HTTP_BINDING_TEMPLATE* templateValue,
    __in_ecount_opt(proxyPropertyCount) const WS_PROXY_PROPERTY* proxyProperties,
    __in const ULONG proxyPropertyCount,
    __deref_out_opt WS_SERVICE_PROXY** _serviceProxy,
    __in_opt WS_ERROR* error);

struct FlickrFrobRequestPortBindingFunctionTable;
HRESULT FlickrFrobRequestPortBinding_CreateServiceEndpoint(
    __in_opt WS_HTTP_BINDING_TEMPLATE* templateValue,
    __in_opt CONST WS_STRING* address,
    __in_opt struct FlickrFrobRequestPortBindingFunctionTable* functionTable,
    __in_opt WS_SERVICE_SECURITY_CALLBACK authorizationCallback,
    __in_ecount_opt(endpointPropertyCount) WS_SERVICE_ENDPOINT_PROPERTY* endpointProperties,
    __in const ULONG endpointPropertyCount,
    __in WS_HEAP* heap,
    __deref_out_opt WS_SERVICE_ENDPOINT** serviceEndpoint,
    __in_opt WS_ERROR* error);

////////////////////////////////////////////////
// Client functions definitions
////////////////////////////////////////////////

// Fault Message Flickr_wsdl.faults.FlickrFaultMessage,
    // Fault Action 
    // fault message FlickrFault
// operation: FlickrFrobRequestPortBinding_flickr_auth_getFrob
HRESULT WINAPI FlickrFrobRequestPortBinding_flickr_auth_getFrob(
    __in WS_SERVICE_PROXY* _serviceProxy,
    __in _FlickrRequest* parameters, 
    __out __deref __nullterminated WCHAR** outparameters, 
    __in WS_HEAP* _heap,
    __in_ecount_opt(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    __in const ULONG _callPropertyCount,
    __in_opt const WS_ASYNC_CONTEXT* _asyncContext,
    __in_opt WS_ERROR* _error);

////////////////////////////////////////////////
// Service functions definitions
////////////////////////////////////////////////

// Fault Message Flickr_wsdl.faults.FlickrFaultMessage,
    // Fault Action 
    // fault message FlickrFault
typedef HRESULT (CALLBACK* FlickrFrobRequestPortBinding_flickr_auth_getFrobCallback) (
    __in const WS_OPERATION_CONTEXT* _context,
    __in _FlickrRequest* parameters, 
    __out __deref __nullterminated WCHAR** outparameters, 
    __in_opt const WS_ASYNC_CONTEXT* _asyncContext,
    __in_opt WS_ERROR* _error);

// binding: FlickrFrobRequestPortBinding
typedef struct FlickrFrobRequestPortBindingFunctionTable 
{
    FlickrFrobRequestPortBinding_flickr_auth_getFrobCallback FlickrFrobRequestPortBinding_flickr_auth_getFrob;
} FlickrFrobRequestPortBindingFunctionTable;

////////////////////////////////////////////////
// Policy helper routines
////////////////////////////////////////////////

//  WS_CHANNEL_PROPERTY_ENCODING = WS_ENCODING_XML_UTF8,
//  WS_CHANNEL_PROPERTY_ADDRESSING_VERSION = WS_ADDRESSING_VERSION_TRANSPORT,
//  WS_ENVELOPE_VERSION = WS_ENVELOPE_VERSION_SOAP_1_1,
// client channel type: WS_CHANNEL_TYPE_REQUEST, service endpoint channel type: WS_CHANNEL_TYPE_REPLY

HRESULT FlickrTokenRequestPortBinding_CreateServiceProxy(
    __in_opt WS_HTTP_BINDING_TEMPLATE* templateValue,
    __in_ecount_opt(proxyPropertyCount) const WS_PROXY_PROPERTY* proxyProperties,
    __in const ULONG proxyPropertyCount,
    __deref_out_opt WS_SERVICE_PROXY** _serviceProxy,
    __in_opt WS_ERROR* error);

struct FlickrTokenRequestPortBindingFunctionTable;
HRESULT FlickrTokenRequestPortBinding_CreateServiceEndpoint(
    __in_opt WS_HTTP_BINDING_TEMPLATE* templateValue,
    __in_opt CONST WS_STRING* address,
    __in_opt struct FlickrTokenRequestPortBindingFunctionTable* functionTable,
    __in_opt WS_SERVICE_SECURITY_CALLBACK authorizationCallback,
    __in_ecount_opt(endpointPropertyCount) WS_SERVICE_ENDPOINT_PROPERTY* endpointProperties,
    __in const ULONG endpointPropertyCount,
    __in WS_HEAP* heap,
    __deref_out_opt WS_SERVICE_ENDPOINT** serviceEndpoint,
    __in_opt WS_ERROR* error);

////////////////////////////////////////////////
// Client functions definitions
////////////////////////////////////////////////

// Fault Message Flickr_wsdl.faults.FlickrFaultMessage0,
    // Fault Action 
    // fault message FlickrFault
// operation: FlickrTokenRequestPortBinding_flickr_auth_getToken
HRESULT WINAPI FlickrTokenRequestPortBinding_flickr_auth_getToken(
    __in WS_SERVICE_PROXY* _serviceProxy,
    __in _FlickrRequest* parameters, 
    __out __deref __nullterminated WCHAR** outparameters, 
    __in WS_HEAP* _heap,
    __in_ecount_opt(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    __in const ULONG _callPropertyCount,
    __in_opt const WS_ASYNC_CONTEXT* _asyncContext,
    __in_opt WS_ERROR* _error);

////////////////////////////////////////////////
// Service functions definitions
////////////////////////////////////////////////

// Fault Message Flickr_wsdl.faults.FlickrFaultMessage0,
    // Fault Action 
    // fault message FlickrFault
typedef HRESULT (CALLBACK* FlickrTokenRequestPortBinding_flickr_auth_getTokenCallback) (
    __in const WS_OPERATION_CONTEXT* _context,
    __in _FlickrRequest* parameters, 
    __out __deref __nullterminated WCHAR** outparameters, 
    __in_opt const WS_ASYNC_CONTEXT* _asyncContext,
    __in_opt WS_ERROR* _error);

// binding: FlickrTokenRequestPortBinding
typedef struct FlickrTokenRequestPortBindingFunctionTable 
{
    FlickrTokenRequestPortBinding_flickr_auth_getTokenCallback FlickrTokenRequestPortBinding_flickr_auth_getToken;
} FlickrTokenRequestPortBindingFunctionTable;

////////////////////////////////////////////////
// Global web service descriptions.
////////////////////////////////////////////////

typedef struct _Flickr_wsdl
{
    struct // globalElements
    {
        // xml element: FlickrRequest ("urn:flickr")
        // c type: _FlickrRequest
        // elementDescription: Flickr_wsdl.globalElements.FlickrRequest
        WS_ELEMENT_DESCRIPTION FlickrRequest;
        
        // xml element: FlickrResponse ("urn:flickr")
        // c type: WCHAR*
        // elementDescription: Flickr_wsdl.globalElements.FlickrResponse
        WS_ELEMENT_DESCRIPTION FlickrResponse;
        
        // xml element: FlickrFault ("urn:flickr")
        // c type: WCHAR*
        // elementDescription: Flickr_wsdl.globalElements.FlickrFault
        WS_ELEMENT_DESCRIPTION FlickrFault;
        
    } globalElements;
    struct // externallyReferencedTypes
    {
        WS_STRUCT_DESCRIPTION FlickrRequest;
    } externallyReferencedTypes;
    struct // messages
    {
        // message: FlickrRequestMessage
        // c type: _FlickrRequest
        // action: "flickr"
        // messageDescription: Flickr_wsdl.messages.FlickrRequestMessage
        WS_MESSAGE_DESCRIPTION FlickrRequestMessage;
        
        // message: FlickrResponseMessage
        // c type: WCHAR*
        // action: ""
        // messageDescription: Flickr_wsdl.messages.FlickrResponseMessage
        WS_MESSAGE_DESCRIPTION FlickrResponseMessage;
        
        // message: FlickrRequestMessage
        // c type: _FlickrRequest
        // action: "flickr"
        // messageDescription: Flickr_wsdl.messages.FlickrRequestMessage
        WS_MESSAGE_DESCRIPTION FlickrRequestMessage0;
        
        // message: FlickrResponseMessage
        // c type: WCHAR*
        // action: ""
        // messageDescription: Flickr_wsdl.messages.FlickrResponseMessage
        WS_MESSAGE_DESCRIPTION FlickrResponseMessage0;
        
    } messages;
    struct // faults
    {
        // message: FlickrFaultMessage
        // c type: WCHAR*
        // action: ""
        // messageDescription: Flickr_wsdl.faults.FlickrFaultMessage
        WS_FAULT_DETAIL_DESCRIPTION FlickrFaultMessage;
        
        // message: FlickrFaultMessage
        // c type: WCHAR*
        // action: ""
        // messageDescription: Flickr_wsdl.faults.FlickrFaultMessage
        WS_FAULT_DETAIL_DESCRIPTION FlickrFaultMessage0;
        
    } faults;
    struct // contracts
    {
        // binding: FlickrFrobRequestPortBinding
        // portType: FlickrFrobRequestPort
        // operation: FlickrFrobRequestPortBinding_flickr_auth_getFrob
        //     input message: FlickrRequestMessage
        //     output message: FlickrResponseMessage
        //     fault message: FlickrFaultMessage
        // contractDescription: Flickr_wsdl.contracts.FlickrFrobRequestPortBinding
        WS_CONTRACT_DESCRIPTION FlickrFrobRequestPortBinding;
        
        // binding: FlickrTokenRequestPortBinding
        // portType: FlickrTokenRequestPort
        // operation: FlickrTokenRequestPortBinding_flickr_auth_getToken
        //     input message: FlickrRequestMessage
        //     output message: FlickrResponseMessage
        //     fault message: FlickrFaultMessage
        // contractDescription: Flickr_wsdl.contracts.FlickrTokenRequestPortBinding
        WS_CONTRACT_DESCRIPTION FlickrTokenRequestPortBinding;
        
    } contracts;
    struct // policies
    {
        // policy for binding: FlickrFrobRequestPortBinding
        // port name: FlickrFrobRequestPort, binding: FlickrFrobRequestPortBinding, namespace: urn:flickr
        WS_HTTP_POLICY_DESCRIPTION FlickrFrobRequestPortBinding;
        // policy for binding: FlickrTokenRequestPortBinding
        // port name: FlickrTokenRequestPort, binding: FlickrTokenRequestPortBinding, namespace: urn:flickr
        WS_HTTP_POLICY_DESCRIPTION FlickrTokenRequestPortBinding;
    } policies;
} _Flickr_wsdl;

extern const _Flickr_wsdl Flickr_wsdl;

#ifdef __cplusplus
}
#endif

